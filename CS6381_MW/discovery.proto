// How to compile: 
// protoc -I=CS6381_MW --python_out=CS6381_MW CS6381_MW/discovery.proto --experimental_allow_proto3_optional
syntax = "proto3";

enum Role {
    ROLE_UNKNOWN = 0;
    ROLE_PUBLISHER = 1;
    ROLE_SUBSCRIBER = 2;
    ROLE_BOTH = 3;  // played by the broker.
}

// an enumeration for the status of the message request
enum Status {
    STATUS_UNKNOWN = 0;
    STATUS_SUCCESS = 1;
    STATUS_FAILURE = 2;
    STATUS_CHECK_AGAIN = 3;   // when the server is not ready to provide info as yet
}

// define an enum of all message types supported on a discovery service.
// This could be REGISTER_REQ, LOOKUP_PUB_BY_TOPIC, READY
enum MsgTypes {
     TYPE_UNKNOWN = 0;
     TYPE_REGISTER = 1;  // used by pub, sub and broker.
     TYPE_ISREADY = 2;    // needed by publisher to know if it can proceed
     TYPE_LOOKUP_PUB_BY_TOPIC = 3;  // needed by a subscriber
     TYPE_LOOKUP_ALL_PUBS = 4;   // probably needed by broker
     // anything more
}

enum NodeTypes {
    NODE_INITIAL= 0;
    NODE_SUCCESSOR = 1;
    NODE_FORWARD = 2;   
}

// use to encode the details of the publisher or subscriber
// IP addr and port number are needed for publisher side only
message RegistrantInfo {
    string id = 1;  // name of the entity
    string addr = 2; // IP address (only for publisher)
    uint32 port = 3; // port number (only for publisher)
}

message RegisterReq
{
    Role role = 1;   // enum indicating what role we are playing
    RegistrantInfo info = 2; // info about the registrant
    repeated string topiclist = 3; // an array of topic names (published or subscribed to)
}

message RegisterResp
{
    Status status = 1;   // success or failure
    string reason = 2; // reason for failure
}

message IsReadyReq
{
   // we really don't need to send any field
   optional int64 no_pubs = 1;
   optional int64 no_subs = 2;
   optional bool broker = 3;
}

// Response to the IsReady request
message IsReadyResp
{
    bool status = 1; // yes or no
}

message LookupPubByTopicReq
{
    repeated string topiclist = 1; // modify this appropriately
}

message LookupPubByTopicResp
{
    repeated RegistrantInfo publisher_info = 1; // matched_pubs
}

message LookupAllPubsReq {
    // Nothing to send
}

message LookupAllPubsResp {
    repeated RegistrantInfo publist = 1;
}

message DiscoveryReq
{
    NodeTypes node_type = 1;    
    MsgTypes msg_type = 2;
    optional int64 key = 3;
    oneof Content {
        RegisterReq register_req = 4;
        IsReadyReq isready_req = 5;
        LookupPubByTopicReq lookup_req = 6;
        // add more 
        LookupAllPubsReq allpubs_req = 7;
    }
}

// Response to discovery req will be similar oneof of the responses.
message DiscoveryResp
{
    MsgTypes msg_type = 1;
    oneof Content {
        RegisterResp register_resp = 2;
        IsReadyResp isready_resp = 3;
        LookupPubByTopicResp lookup_resp = 4;
        // add more 
        LookupAllPubsResp allpubs_resp = 5;
    }
}